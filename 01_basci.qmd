---
title: "R vs. SAS"
subtitle: "for clinical sas programmer"
date:  " `r Sys.Date()`"
author: "author"
format:
  html:
    grid:
      sidebar-width: 200px
      body-width: 1000px
      margin-width: 100px
    toc: true
    toc-location: left
    number-sections: true
    embed-resources: true
    code-link: true
    # code-fold: true
    df-print: paged
    # df-print: kable
execute:  
    cache: true
---

```{r}
#| output: false

library(haven) # Import/export of SAS data sets
library(dplyr) # Data transformation
library(tidyr) # Reshaping data
library(stringr) # Strings and characters
```

```{r}
#| collapse: true
# R.version
packageVersion("haven")
packageVersion("dplyr")
packageVersion("stringr")
```

::: callout-note
The intended readers are clinical SAS programmers who know SAS programming and want to learn R programming

R code results are generated by R when rendering the file, while the SAS code results are screenshot manually from [SAS](https://welcome.oda.sas.com/).

The SAS data sets under data folder are from the GitHub [repository](https://github.com/phuse-org/phuse-scripts)
:::

# Basic syntax difference
## comment
- R single-line comment `# This is a comment`
- SAS
  - single-line `/* some comments */` or `* This is a comment ;`
  - multi-line comments
```{sas}
#| eval: false
/*
This is a multi-line
comment in sas
*/
```


## Name convention

::: grid
::: g-col-6
-   R
    -   case **sensitive**

    -   [syntactic names](https://adv-r.hadley.nz/names-values.html#non-syntactic)

        -   letters, digits, . and \_, but **can't begin with \_ or a digit**
        -   No use of reserved words like `TRUE`, `NULL`, `if`, and `function`

    -   non-syntactic name, `` `_a` ``
:::

::: g-col-6
-   SAS
    -   case **insensitive**
    -   [`VALIDVARNAME= V7`](https://documentation.sas.com/doc/en/lrcon/9.4/p18cdcs4v5wd2dn1q0x296d3qek6.htm)
        -   letters, numbers, or underscores
        -   must begin with letters or the **underscore**
    -   `VALIDVARNAME=ANY`
:::
:::

## Implicit iteration

-   R vector recycling, vectorized operations
-   SAS data step's built-in loop, execute observation by observation

## common data type
R has the 4 basic atomic data type and other data structure
SAS has only 2 data types: character and numeric

![](images/summary-tree-atomic.png)

+------------------------------------------------+--------------------------------------------------+
| R                                              | SAS                                              |
+================================================+==================================================+
| Character `c("a", "b")`                        | Character `"a"`                                  |
+------------------------------------------------+--------------------------------------------------+
| Integer `c(1L, 2L)`                            | Number `1`                                       |
+------------------------------------------------+--------------------------------------------------+
| Double `c(1.1, 2.2)`                           | Number `1.1`                                     |
+------------------------------------------------+--------------------------------------------------+
| Logical `c(TRUE, FALSE)`                       |                                                  |
+------------------------------------------------+--------------------------------------------------+
| Date(number of days since 1970-01-01)          | SAS data(number of days since 1960-01-01)        |
+------------------------------------------------+--------------------------------------------------+
| Date-times(number of seconds since 1970-01-01) | SAS DateTime(number of seconds since 1960-01-01) |
+------------------------------------------------+--------------------------------------------------+
| Factor                                         | SAS format                                       |
+------------------------------------------------+--------------------------------------------------+
| Array                                          |                                                  |
+------------------------------------------------+--------------------------------------------------+
| Data frame                                     | SAS data sets                                    |
+------------------------------------------------+--------------------------------------------------+

- Convert between character and numeric variables
put input


## Missing value and sepcial values in R

+-------------------+-----------------+------------------+-------------------+--------------------------+
|                   | R               | Check in R       | SAS               | Check in SAS             |
+===================+:===============:+==================+:=================:+==========================+
| Missing character | `NA_character_` | `is.na(x)`       | `""` empty string | `X = ""` or `missing(x)` |
+-------------------+-----------------+------------------+-------------------+--------------------------+
| Missing double    | `NA_real_`      | `is.na(x)`       | `.`               | `X = .` or `missing(x)`  |
+-------------------+-----------------+------------------+-------------------+--------------------------+
| Missing integer   | `NA_integer_`   | `is.na(x)`       | `.`               | `X = .` or `missing(x)`  |
+-------------------+-----------------+------------------+-------------------+--------------------------+
| Not a Number      | `NaN` `0/0`     | `is.nan(x)`      |                   |                          |
+-------------------+-----------------+------------------+-------------------+--------------------------+
| Infinity          | `Inf` `1/0`     | `is.infinite(x)` |                   |                          |
+-------------------+-----------------+------------------+-------------------+--------------------------+
| Undefined value   | `NULL`          | `is.null(x)`     |                   |                          |
+-------------------+-----------------+------------------+-------------------+--------------------------+

`missing` function in R to check if the argument was passed to the function or not.
`nmiss` or `cmiss` function in SAS to check multiple missing value in SAS.

`NA` (Not Available) can be coerced to corresponding data type(except raw)

`NaN` (Not a Number), undefined values from mathematical operations, can not compare to any other value

`NA`, `NaN`, and `Inf` have **length 1**

`NULL` is the absence of the object with **length 0**, used as a placeholder for variables that don't have an assigned value

## Control Flow

+----------------------------+--------------------------------+-------------------------------------------+-----------+
|                            | R                              | SAS Data step                             | SAS Macro |
+============================+================================+===========================================+===========+
| Condition                  | ```                            | ```                                       |           |
|                            | a <- 7                         | data _null_;                              |           |
|                            | b <- 3                         |   a = 7;                                  |           |
|                            |                                |   b = 3;                                  |           |
|                            | if (b > a) {                   |   if b > a then do;                       |           |
|                            |   print("b is greater than a") |       put "b is greater than a";          |           |
|                            | } else if (a == b) {           |   end;                                    |           |
|                            |   print("a and b are equal")   |   else if condition thn do;               |           |
|                            | } else {                       |     /* code to execute*/                  |           |
|                            |   print("a is greater than b") |   end;                                    |           |
|                            | }                              |   else do;                                |           |
|                            | ```                            |     /* code to execute*/                  |           |
|                            |                                |   end;                                    |           |
|                            |                                | run;                                      |           |
|                            |                                | ```                                       |           |
+----------------------------+--------------------------------+-------------------------------------------+-----------+
| Loop                       | ```                            | ```                                       |           |
|                            | for(i in 1:5) {                | data _null_;                              |           |
|                            |    print(1:i)                  |   do i = 1 to 10;                         |           |
|                            | }                              |     # code to execute for each value of i |           |
|                            | ```                            |   end;                                    |           |
|                            |                                | run;                                      |           |
|                            |                                | ```                                       |           |
+----------------------------+--------------------------------+-------------------------------------------+-----------+
| Loop                       | ```                            | ```                                       |           |
|                            | i <- 1                         | if(cond) expr                             |           |
|                            | while (i <= 5) {               | ```                                       |           |
|                            |   print(i)                     |                                           |           |
|                            |   i <- i + 1                   |                                           |           |
|                            | }                              |                                           |           |
|                            | ```                            |                                           |           |
+----------------------------+--------------------------------+-------------------------------------------+-----------+
| Loop                       | ```                            | ```                                       |           |
|                            | i <- 1                         | if(cond) expr                             |           |
|                            | repeat {                       | ```                                       |           |
|                            |   print(i)                     |                                           |           |
|                            |   i <- i + 1                   |                                           |           |
|                            |   if (i > 5) {                 |                                           |           |
|                            |     break                      |                                           |           |
|                            |   }                            |                                           |           |
|                            | }                              |                                           |           |
|                            | ```                            |                                           |           |
+----------------------------+--------------------------------+-------------------------------------------+-----------+
| Exit the loop              | ```                            | ```                                       |           |
|                            | ```                            | leave                                     |           |
|                            |                                | ```                                       |           |
+----------------------------+--------------------------------+-------------------------------------------+-----------+
| Skip the current iteration | ```                            | ```                                       |           |
|                            | if(cond) expr                  | continue                                  |           |
|                            | ```                            | ```                                       |           |
+----------------------------+--------------------------------+-------------------------------------------+-----------+

In R, `ifelse` and `switch` can be for conditional flow too,

`?Control` to see more in the R help document

## Function when handling of missing values
- control explicitly by argument `na.rm = TRUE` 
  - `sum(c(1,2,NA))`, return `r sum(c(1,2,NA))`
  - `sum(c(1,2,NA),na.rm = TRUE)` return `r {sum(c(1,2,NA),na.rm = TRUE)}`

- automatically exclude missing value from most calculations, `sum(1,2,.)` return 3

## R function and SAS macros SAS procedure


## Operators

-   Assignment operator

    | R                                           | SAS |
    |---------------------------------------------|-----|
    | `<-` binding the object to a name           | `=` |
    | `=` more use to set function argument value |     |
    | `<<-` global assignments                    |     |

-   Arithmetic operators

    +-----------------------------------+-------------+----------------------------+
    | Operator                          | R           | SAS                        |
    +===================================+:===========:+:==========================:+
    | Addition                          | `+`         | `+`                        |
    +-----------------------------------+-------------+----------------------------+
    | Subtraction                       | `-`         | `-`                        |
    +-----------------------------------+-------------+----------------------------+
    | Multiplication                    | `*`         | `*`                        |
    +-----------------------------------+-------------+----------------------------+
    | Division                          | `/`         | `/`                        |
    +-----------------------------------+-------------+----------------------------+
    | Exponentiation                    | `^`         | `**`                       |
    +-----------------------------------+-------------+----------------------------+
    | Modulus (Remainder from division) | `%%`        | `MOD` function             |
    +-----------------------------------+-------------+----------------------------+
    | Integer Division                  | `%/%`       | `INT` the division resulte |
    +-----------------------------------+-------------+----------------------------+

-   Comparison operators

    +--------------------------+--------------------------------------+--------------------------------+
    | Operator                 | R                                    | SAS                            |
    +==========================+:====================================:+:==============================:+
    | Equal                    | `==`                                 | `=` or `EQ`                    |
    +--------------------------+--------------------------------------+--------------------------------+
    | Not equal                | `!=`                                 | `^=` or `NE`                   |
    +--------------------------+--------------------------------------+--------------------------------+
    | Greater than             | `>`                                  | `>` or `GT`                    |
    +--------------------------+--------------------------------------+--------------------------------+
    | Less than                | `<`                                  | `<`or `LT`                     |
    +--------------------------+--------------------------------------+--------------------------------+
    | Greater than or equal to | `>=`                                 | `>=` or `GE`                   |
    +--------------------------+--------------------------------------+--------------------------------+
    | Less than or equal to    | `<=`                                 | `<=` or `LE`                   |
    +--------------------------+--------------------------------------+--------------------------------+
    | IN                       | `%in%` e.g. `a %in% c("a", "b","c")` | `IN` e.g. `a in ("a","b","c")` |
    +--------------------------+--------------------------------------+--------------------------------+

-   Logical operators

| Operator             |  R  | SAS |
|----------------------|:---:|:---:|
| Logical AND operator |  &  | and |
| Logical OR operator  | \|  | or  |
| Logical NOT          |  !  | not |

The `&` and`|` are vectorized or element-wise operator and return a vector.

`&&` and `||` only evaluate the first element and return one logical value(length 1).

`||` in SAS is concatenation operator, `"Hello" || "World"` return `Hello World`.

```{r}
c(TRUE,TRUE,FALSE) & c(TRUE,FALSE,FALSE) # three value
c(TRUE,TRUE) && c(FALSE,TRUE) # one value
```

# Data Manipulation

tidy data in R rectangular tabulation

## data overview

### column

```{r}
dm <- haven::read_sas("data/sdtm/dm.sas7bdat") # read SAS data to R
dm
```

::: {layout-ncol="2"}
```{r}
#| eval: false
str(dm)
```

```{sas}
#| eval: false
proc contents data = dm;
run;
```
:::

```{r}
#| layout-ncol: 2
#| echo: false
knitr::include_graphics("images/r_sas_2023-05-23T17-46-31.png")
knitr::include_graphics("images/r_sas_2023-05-23T17-37-12.png")
```

## R Data frame vs. SAS Data sets

::: grid
::: g-col-6
-   R Data Frames ![](images/r_sas_2023-05-23T16-10-56.png)
:::

::: g-col-6
-   SAS Data sets ![](images/r_sas_2023-05-23T16-05-48.png)
:::
:::

## create data frame(tibble)

# create the data from list

# data.frame

```{r}
df <- tibble::tibble(
  x = c("a", "b", "c", "d", NA, "e", "f", "a"),
  y = c(1, 2, NA, 4, 5, 6, 7, 10)
)

# Row-wise tibble creation
df <- tibble::tribble(
   ~x, ~y,
  "a",  1,
  "b",  2,
  "c", NA,
  "d",  4,
   NA,  5,
  "e",  6,
  "f",  7,
  "a", 10
  )
```

## empty data frame

## 

# String

# IO

## excel file

## csv file

```{sas}
#| eval: false
proc import datafile = ""
  out=
```

## plain text

# Data migration between R and SAS

Transferring Data between SAS and R Software

# Reference

- Sanofi Oncology Biomarker R Cookbook
- https://www.lexjansen.com/pharmasug-cn/2022/CC/Pharmasug-China-2022-CC110.pdf
- https://www.lexjansen.com/phuse-us/2020/tt/TT11_ppt.pdf
